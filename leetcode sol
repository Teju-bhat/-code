1)Contains Duplicate

import java.util.*;

class obj{
    boolean duplicate(int [] arr){
       HashSet<Integer>set=new HashSet<>();
       for(int i=0;i<arr.length;i++)
       {
           if(set.contains(arr[i]))
           {
               return true;
           }
           else{
               set.add(arr[i]);
           }
       }
       return false;
    }
}
public class Main
{
	public static void main(String[] args) {
		int arr[]={1,1,2,3,4,3};
		obj j =new obj();
	System.out.println(j.duplicate(arr));
}
}
 
2)Final Value of Variable After Performing Operations

Input: operations = ["--X","X++","X++"]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.


import java.util.*;
class prblm{
  int oper (String [] operations){
    int x=0;
      for(int i=0;i<operations.length;i++){
         if(operations[i].charAt(1)=='+'){
           x++;
         }
         else{
           x--;
         }
      }
      return x;
  }
  
}
public class Main {
    public static void main(String[] args) {
        String [] operations={"++x","x++","x++"};
        prblm a=new prblm();
        System.out.println(a.oper(operations));
        
        
    }
}

-------------------------------------------------------------------------------
3)Defanging an IP Address

Input: address = "1.1.1.1"
Output: "1[.]1[.]1[.]1"

import java.util.*;
class Solution {
      public String defangIPaddr(String address) {
        StringBuilder sb=new StringBuilder();
        int i=0;
       
        while(i<address.length())
        {
            if(address.charAt(i)=='.'){
                sb.append("[.]");
                i++;
                
            }
            else{
                sb.append(address.charAt(i));
                i++;
            }         
        }
        return sb.toString();
    }}
class Main {
    public static void main(String[] args) {
        String  address="1.1.1";
       Solution a=new Solution();
        System.out.println(a.defangIPaddr(address));
    }
}

//use string built in method replace()
String str=address.replace(".","[.]");
return str;
-------------------------------------------------------------------------
4) Jewels and Stones

Example 1:

Input: jewels = "aA", stones = "aAAbbbb"
Output: 3
Example 2:

Input: jewels = "z", stones = "ZZ"
Output: 0
 
import java.util.*;
class prblm{
    public int jew(String jewels,String stones){
        int count=0;
        for(int i=0;i<jewels.length();i++){
            for(int j=0;j<stones.length();j++){
                if(jewels.charAt(i)==stones.charAt(j)){
                    count++;
                }
            }
        }return count;
    }
}
class Main {
    public static void main(String[] args) {
     String jewels="aA" ;
     String stones="aAAbbbb";    
     prblm a=new prblm();
     System.out.println(a.jew(jewels,stones));
      
    }
}
OR USE indexOf()method

class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        int count=0;
           for(int i=0;i<stones.length();i++){
              if(jewels.indexOf(stones.charAt(i))>-1) {
                  count++;
              }
           }return count;
          
       }
 ----------------------------------------------------------------------------
5)Example 1:
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.


Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
   Output: "leetcode"   

class Solution {
    public String restoreString(String s, int[] indices) {
          char [] arr=new char[indices.length];
        for(int i=0;i<indices.length;i++)
        {
            arr[indices[i]]=s.charAt(i); 
            
        }
        return new String(arr);
        
    
    }
}
------------------------------------------------
6)Goal Parser Interpretation
Input: command = "G()(al)"
Output: "Goal"
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal". 


class Solution {
    public String interpret(String command) {
 /*   StringBuilder s=new StringBuilder();  
        for(int i=0;i<command.length();i++){
           if(command.charAt(i)=='G') 
                    s.append('G');
             else if(command.charAt(i)=='(' &&  command.charAt(i+1)==')') {
                 s.append('o');
            i=i+1; 
             }
                
            else{
                s.append("al");
                i=i+3;
              }
        }
        return s.toString();*/
        command=command.replace("()","o");
        command=command.replace("(al)","al");
        return command;
    }
}
---------------------------------------------------
7)https://leetcode.com/problems/missing-number/

class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        int n=nums.length;
       int ans=n*(n+1)/2;
      
        for(int i=0;i<nums.length;i++){
              sum=sum+nums[i];    
              
        }
        return ans-sum;
    }
}

-------------------------------------------------------------------
8)
Majority Element

class Solution
{
    static int majorityElement(int a[], int size)
    {
        int count=0;
        int lim=0;
        int val=0;
        if(a.length==1){
            return a[0];
        }
        Arrays.sort(a);
        for(int i=0;i<a.length-1;i++){
               if(a[i]==a[i+1]){
                   count++;
               }else{
                   count=0;
               }
               if(count>lim){
                   lim=count;
                   val=a[i];
               }
               
        }
        if(lim>=(a.length/2))
        {
            return val;
        }
        
        else{
            return -1;
        }
      }
}
----------------------------------------------------
