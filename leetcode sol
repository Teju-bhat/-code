1)Contains Duplicate

import java.util.*;

class obj{
    boolean duplicate(int [] arr){
       HashSet<Integer>set=new HashSet<>();
       for(int i=0;i<arr.length;i++)
       {
           if(set.contains(arr[i]))
           {
               return true;
           }
           else{
               set.add(arr[i]);
           }
       }
       return false;
    }
}
public class Main
{
	public static void main(String[] args) {
		int arr[]={1,1,2,3,4,3};
		obj j =new obj();
	System.out.println(j.duplicate(arr));
}
}
 
2)Final Value of Variable After Performing Operations

Input: operations = ["--X","X++","X++"]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.


import java.util.*;
class prblm{
  int oper (String [] operations){
    int x=0;
      for(int i=0;i<operations.length;i++){
         if(operations[i].charAt(1)=='+'){
           x++;
         }
         else{
           x--;
         }
      }
      return x;
  }
  
}
public class Main {
    public static void main(String[] args) {
        String [] operations={"++x","x++","x++"};
        prblm a=new prblm();
        System.out.println(a.oper(operations));
        
        
    }
}

-------------------------------------------------------------------------------
3)Defanging an IP Address

Input: address = "1.1.1.1"
Output: "1[.]1[.]1[.]1"

import java.util.*;
class Solution {
      public String defangIPaddr(String address) {
        StringBuilder sb=new StringBuilder();
        int i=0;
       
        while(i<address.length())
        {
            if(address.charAt(i)=='.'){
                sb.append("[.]");
                i++;
                
            }
            else{
                sb.append(address.charAt(i));
                i++;
            }         
        }
        return sb.toString();
    }}
class Main {
    public static void main(String[] args) {
        String  address="1.1.1";
       Solution a=new Solution();
        System.out.println(a.defangIPaddr(address));
    }
}

//use string built in method replace()
String str=address.replace(".","[.]");
return str;
-------------------------------------------------------------------------
4) Jewels and Stones

Example 1:

Input: jewels = "aA", stones = "aAAbbbb"
Output: 3
Example 2:

Input: jewels = "z", stones = "ZZ"
Output: 0
 
import java.util.*;
class prblm{
    public int jew(String jewels,String stones){
        int count=0;
        for(int i=0;i<jewels.length();i++){
            for(int j=0;j<stones.length();j++){
                if(jewels.charAt(i)==stones.charAt(j)){
                    count++;
                }
            }
        }return count;
    }
}
class Main {
    public static void main(String[] args) {
     String jewels="aA" ;
     String stones="aAAbbbb";    
     prblm a=new prblm();
     System.out.println(a.jew(jewels,stones));
      
    }
}
OR USE indexOf()method

class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        int count=0;
           for(int i=0;i<stones.length();i++){
              if(jewels.indexOf(stones.charAt(i))>-1) {
                  count++;
              }
           }return count;
          
       }
 ----------------------------------------------------------------------------
5)Example 1:
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.


Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
   Output: "leetcode"   

class Solution {
    public String restoreString(String s, int[] indices) {
          char [] arr=new char[indices.length];
        for(int i=0;i<indices.length;i++)
        {
            arr[indices[i]]=s.charAt(i); 
            
        }
        return new String(arr);
        
    
    }
}
------------------------------------------------
6)Goal Parser Interpretation
Input: command = "G()(al)"
Output: "Goal"
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal". 


class Solution {
    public String interpret(String command) {
 /*   StringBuilder s=new StringBuilder();  
        for(int i=0;i<command.length();i++){
           if(command.charAt(i)=='G') 
                    s.append('G');
             else if(command.charAt(i)=='(' &&  command.charAt(i+1)==')') {
                 s.append('o');
            i=i+1; 
             }
                
            else{
                s.append("al");
                i=i+3;
              }
        }
        return s.toString();*/
        command=command.replace("()","o");
        command=command.replace("(al)","al");
        return command;
    }
}
---------------------------------------------------
7)https://leetcode.com/problems/missing-number/

class Solution {
    public int missingNumber(int[] nums) {
        int sum=0;
        int n=nums.length;
       int ans=n*(n+1)/2;
      
        for(int i=0;i<nums.length;i++){
              sum=sum+nums[i];    
              
        }
        return ans-sum;
    }
}

-------------------------------------------------------------------
8)
Majority Element

class Solution
{
    static int majorityElement(int a[], int size)
    {
        int count=0;
        int lim=0;
        int val=0;
        if(a.length==1){
            return a[0];
        }
        Arrays.sort(a);
        for(int i=0;i<a.length-1;i++){
               if(a[i]==a[i+1]){
                   count++;
               }else{
                   count=0;
               }
               if(count>lim){
                   lim=count;
                   val=a[i];
               }
               
        }
        if(lim>=(a.length/2))
        {
            return val;
        }
        
        else{
            return -1;
        }
      }
}
----------------------------------------------------
9)189. Rotate Array


Given an array, rotate the array to the right by k steps, where k is non-negative.

 Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

______________________________________________________________
algo                                         1 2 3 4 5 6 7 
     reverse whole array                     7 6 5 4 3 2 1
     reverse array upto k-1                  5 6 7 4 3 2 1
     rverse array from k to arrlength        5 6 7 1 2 3 4
__________________________________________________________________-     
     
class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);
        
    }
    public void reverse(int [] nums,int start,int end){
          while(start< end){
               int temp=nums[start];
              nums[start]=nums[end];
              nums[end]=temp;
              start++;
              end--;
          }
    }
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
10)
N = 3
arr[] = {9,9,9}
Output: 
1 0 0 0


N = 3
arr[] = {1, 2, 4}
Output: 
1 2 5

import java.util.*;
public class Main
{
    public int[] plus(int [] arr,int N)
    {
         
        for(int i=N-1;i>=0;i--)
        {
            if(arr[i]<9)
            {
                arr[i]++;
                return arr;
            }
            if(i==0)
            {
                arr[i]=10;
                return arr;
            }
            arr[i]=0;
        }
        return arr;
        
    }
	public static void main(String[] args)
	{
	     Scanner sc=new Scanner(System.in);
	    int N=sc.nextInt();
	    int [] arr=new int[N];
	    for(int i=0;i<N;i++)
	    {
	        arr[i]=sc.nextInt();
	    }
	    int a[]=new int[N];
		Main ans=new Main();
		
		a=ans.plus(arr,N);
		for(int i=0; i<N; i++)
		{
		    System.out.print(a[i]);
		}
		
		
	}
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
11)Wave Array 

Given a sorted array arr[] of distinct integers. Sort the array into a wave-like array and return it
In other words, arrange the elements into a sequence such that arr[1] >= arr[2] <= arr[3] >= arr[4] <= arr[5].....

If there are multiple solutions, find the lexicographically smallest one.
n = 5
arr[] = {1,2,3,4,5}
Output: 2 1 4 3 5

n = 6
arr[] = {2,4,7,8,9,10}
Output: 4 2 8 7 10 9

    public static void convertToWave(int arr[], int n)
    {
        int temp=0;
        for(int i=0;i<arr.length-1;i++){
            if(i%2==0 && arr[i]<=arr[i+1])
            {
                temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
                
            } 
            else if(i%2!=0 && arr[i]>=arr[i+1]){
                temp=arr[i];
                arr[i]=arr[i+1];
                arr[i+1]=temp;
                
            }
            }
            }
        
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++===
12)Kth smallest element
https://practice.geeksforgeeks.org/problems/kth-smallest-element5635/1/?page=1&category[]=Arrays&curated[]=1&sortBy=submissions#

Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.
__________________________________________________________________
Example 1:

Input:
N = 6
arr[] = 7 10 4 3 20 15
K = 3
Output : 7
Explanation :
3rd smallest element in the given 
array is 7.
Example 2:

Input:
N = 5
arr[] = 7 10 4 20 15
K = 4
Output : 15
Explanation :
4th smallest element in the given 
array is 15.
_____________________________________________________________
	class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        /*Arrays.sort(arr);
        return arr[k-1];*/
        for(int i=0;i<arr.length;i++){
            for(int j=i+1;j<arr.length;j++){
                if(arr[j]<arr[i]){
                    int temp=0;
                    temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }
        return arr[k-1];
    } 
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
13)Sum of Middle Elements of two sorted arrays
https://practice.geeksforgeeks.org/problems/sum-of-middle-elements-of-two-sorted-arrays2305/1/?page=2&category[]=Arrays&curated[]=1&sortBy=submissions#

Given 2 sorted arrays Ar1 and Ar2 of size N each. Merge the given arrays and find the sum of the two middle elements of the merged array.
_____________________________________________
Input:
N = 5
Ar1[] = {1, 2, 4, 6, 10}
Ar2[] = {4, 5, 6, 9, 12}
Output: 11
Explanation: The merged array looks like
{1,2,4,4,5,6,6,9,10,12}. Sum of middle
elements is 11 (5 + 6).
 

Example 2:

Input:
N = 5
Ar1[] = {1, 12, 15, 26, 38}
Ar2[] = {2, 13, 17, 30, 45}
Output: 32
Explanation: The merged array looks like
{1, 2, 12, 13, 15, 17, 26, 30, 38, 45} 
sum of middle elements is 32 (15 + 17).
______________________________________________________________
class Solution {
    int findMidSum(int[] ar1, int[] ar2, int n) {
        int [] ar3=new int[ar2.length+ar1.length];
    
        for(int i=0;i<ar1.length;i++){
          ar3[i]=ar1[i];
        }
       int j=0;
       for(int i=ar1.length;i<ar3.length;i++){
           ar3[i]=ar2[j];
           j++;
       }
       Arrays.sort(ar3);
       
      // int sum=;
       return ar3[ar3.length/2]+ar3[ar3.length/2-1];
}

    
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Given an array Arr of N positive integers. Your task is to find the elements whose value is equal to that of its index value ( Consider 1-based indexing ).
https://practice.geeksforgeeks.org/problems/value-equal-to-index-value1330/1/?page=1&category[]=Arrays&curated[]=7&sortBy=submissions#
________________________________________________________________________
Example 1:

Input: 
N = 5
Arr[] = {15, 2, 45, 12, 7}
Output: 2
Explanation: Only Arr[2] = 2 exists here.
Example 2:

Input: 
N = 1
Arr[] = {1}
Output: 1
Explanation: Here Arr[1] = 1 exists.
____________________________________________________________________________

class Solution {
    ArrayList<Integer> valueEqualToIndex(int arr[], int n) {
        ArrayList<Integer> a=new ArrayList<>();
           
           for(int i=0;i<arr.length;i++){
               if(arr[i]==i+1){
                   a.add(i+1);
               }
           }
           return a;
    }
}++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
https://leetcode.com/problems/product-of-array-except-self/submissions/
238. Product of Array Except Self


Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.
______________________________________________
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
_____________________________________________________
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int [] leftarr=new int [nums.length];
        int [] rightarr=new int [nums.length];
        int [] ans=new int[nums.length];
        leftarr[0]=1;
        rightarr[nums.length-1]=1;
       
        for(int i=1;i<nums.length;i++){
            leftarr[i]=nums[i-1]*leftarr[i-1];
           
          
        }
        
        for(int i=nums.length-2;i>=0;i--){
                   rightarr[i]=nums[i+1]*rightarr[i+1];
        }
        for(int i=0;i<nums.length;i++){
            ans[i]=leftarr[i]*rightarr[i];
        }    
        return ans;
           
        
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Largest Number At Least Twice of Others
https://leetcode.com/explore/learn/card/array-and-string/201/introduction-to-array/1147/
______________________________________________________________________
Input: nums = [3,6,1,0]
Output: 1
Explanation: 6 is the largest integer.
For every other number in the array x, 6 is at least twice as big as x.
The index of value 6 is 1, so we return 1.

Input: nums = [1,2,3,4]
Output: -1
Explanation: 4 is less than twice the value of 3, so we return -1.
____________________________________________________________________
class Solution {
    public int dominantIndex(int[] nums) {
        //[3,6,1,0]
        // return 1
        int max=0,index=0;
        for(int i=0;i<nums.length;i++){
             if(nums[i]>max){
                    max=nums[i];
                    index=i;
             }
        }
      for(int j=0;j<nums.length;j++){
            if(j!=index && (nums[j]*2)>max){
                return -1;
            }
    }
         return index;
    }
   }    
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
28. Implement strStr()
https://leetcode.com/problems/implement-strstr/
______________________________________________________________
Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
_____________________________________________________________

class Solution {
    public int strStr(String haystack, String needle)
    { 
        if(needle.equals("")){
              return 0;
          } 
        if(needle.equals(haystack)){
          return 0;
        }
        char [] h=haystack.toCharArray();
        char[] n=needle.toCharArray();
        int count=0;
        int s=h.length;
      int  a=n.length;
     
        for(int i=0;i<=(s-a);i++)
        {      boolean isbool=true;
             for(int j=0;j<a;j++)
             {
                if(n[j]!=h[i+j])
                {   
                    isbool=false;
                       break;
                 }
              }
                 if(isbool==true)
                 {
                   return i;
                 }
             } return -1;
       }
       
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

